import { AccordionProps } from '@material-ui/core';
import { CheckboxProps } from '@material-ui/core/Checkbox';
import { ReactNode } from 'react';
export declare type DVKValue =
  | string
  | number
  | string[]
  | DVKObject
  | DVKListItem[]
  | File;
export declare type DVKObject = {
  [key: string]: DVKValue;
};
export declare type DVKListItem = {
  id: any;
  syntheticId: string;
};
export declare type DVKInvalidFields = {
  [key: string]: boolean | string;
};
declare type BasicField<TType> = {
  name: string;
  type: TType;
};
declare type LabeledField<TType> = BasicField<TType> & {
  label: string;
};
export declare type FieldWithErrorManagement = {
  errorMessage?:
    | string
    | {
        [key: string]: string;
      };
};
export declare type PropsWithErrorManagement = {
  hasError: boolean;
  message: string | undefined;
};
export declare type DVKFieldMashed = DVKField &
  DVKDateTimeField &
  DVKListField &
  DVKSelectField &
  DVKDefaultField &
  DVKImageField &
  DVKFileField &
  DVKCheckboxField &
  DVKHiddenField &
  DVKComboBoxField;
export declare type DVKFieldType =
  | DVKDateTimeType
  | DVKListType
  | DVKSelectType
  | DVKDefaultType
  | DVKImageType
  | DVKFileType
  | DVKCheckboxType
  | DVKHiddenType
  | DVKComboBoxType;
export declare type DVKField = (
  | DVKDateTimeField
  | DVKListField
  | DVKSelectField
  | DVKDefaultField
  | DVKImageField
  | DVKFileField
  | DVKCheckboxField
  | DVKHiddenField
  | DVKComboBoxField
) & {
  infoModal?: {
    title: string;
    message: string;
    buttonProps?: any;
  };
};
export declare function isHiddenField(field: DVKField): field is DVKHiddenField;
export declare type DVKDateTimeType = 'date' | 'time' | 'date-time';
export declare type DVKDateTimeField = LabeledField<DVKDateTimeType> &
  FieldWithErrorManagement & {
    required?: boolean;
    disabled?: boolean;
  };
export declare type DVKListType = 'list';
export declare type DVKListField = LabeledField<DVKListType> & {
  fields: DVKField[];
  newLabel?: string;
  editLabel?: (value: DVKListItem) => string;
  deleteLabel?: (value: DVKListItem) => string;
  deleteMessage?: (value: DVKListItem) => string;
  accordionProps?: Omit<AccordionProps, 'children'>;
};
export declare type DVKSelectFieldValue =
  | string
  | {
      name: string;
      label: string;
    };
export declare type DVKSelectType = 'select';
export declare type DVKSelectField = LabeledField<DVKSelectType> &
  FieldWithErrorManagement & {
    required?: boolean;
    autoFocus?: boolean;
    disabled?: boolean;
    values: DVKSelectFieldValue[];
  };
export declare type DVKDefaultType = 'text' | 'email' | 'password' | 'number';
export declare type DVKDefaultField = LabeledField<DVKDefaultType> &
  FieldWithErrorManagement & {
    required?: boolean;
    autoFocus?: boolean;
    disabled?: boolean;
    autoComplete?: string;
    multiline?: boolean;
  };
export declare type DVKImageType = 'image';
export declare type DVKImageField = LabeledField<DVKImageType> &
  FieldWithErrorManagement & {
    required?: boolean;
    autoFocus?: boolean;
    disabled?: boolean;
  };
export declare type DVKFileType = 'file';
export declare type DVKFileField = LabeledField<DVKFileType> &
  FieldWithErrorManagement & {
    required?: boolean;
    disabled?: boolean;
    acceptedFileType?: string;
    multiple?: boolean;
  };
export declare type DVKCheckboxType = 'checkbox';
export declare type DVKCheckboxField = LabeledField<DVKCheckboxType> &
  FieldWithErrorManagement & {
    text?: string;
    required?: boolean;
    disabled?: boolean;
    checkboxProps?: CheckboxProps;
  };
export declare type DVKHiddenType = 'hidden';
export declare type DVKHiddenField = BasicField<DVKHiddenType>;
export declare type DVKComboBoxFieldValue =
  | string
  | ({
      name: string;
      label: string;
    } & any);
export declare type DVKComboBoxType = 'combo-box';
export declare type DVKComboBoxField<
  T extends DVKComboBoxFieldValue = any
> = LabeledField<DVKComboBoxType> &
  FieldWithErrorManagement & {
    required?: boolean;
    autoFocus?: boolean;
    disabled?: boolean;
    multiple?: boolean;
    search?: (search: string) => Promise<T[]>;
    options?: T[];
    renderOption?: (value: T) => ReactNode;
  };
export {};
