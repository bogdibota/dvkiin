'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@material-ui/core');
var Divider = require('@material-ui/core/Divider');
var IconButton = require('@material-ui/core/IconButton');
var ListItemIcon = require('@material-ui/core/ListItemIcon');
var ListItemText = require('@material-ui/core/ListItemText');
var Menu = require('@material-ui/core/Menu');
var MenuItem = require('@material-ui/core/MenuItem');
var TableBody = require('@material-ui/core/TableBody');
var TableCell = require('@material-ui/core/TableCell');
var TableHead = require('@material-ui/core/TableHead');
var TablePagination = require('@material-ui/core/TablePagination');
var TableRow = require('@material-ui/core/TableRow');
var TableSortLabel = require('@material-ui/core/TableSortLabel');
var Tooltip = require('@material-ui/core/Tooltip');
var MenuIcon = require('@material-ui/icons/MoreVert');
var React = require('react');
var DeleteIcon = require('@material-ui/icons/Delete');
var EditIcon = require('@material-ui/icons/Edit');
var CloneIcon = require('@material-ui/icons/FileCopy');
var InfoIcon = require('@material-ui/icons/Info');
var Dialog = require('@material-ui/core/Dialog');
var DialogContent = require('@material-ui/core/DialogContent');
var DialogContentText = require('@material-ui/core/DialogContentText');
var DialogTitle = require('@material-ui/core/DialogTitle');
var Slide = require('@material-ui/core/Slide');
var CircularProgress = require('@material-ui/core/CircularProgress');
var FormControl = require('@material-ui/core/FormControl');
var TextField = require('@material-ui/core/TextField');
var Autocomplete = require('@material-ui/lab/Autocomplete');
var pickers = require('@material-ui/pickers');
var Button = require('@material-ui/core/Button');
var FormHelperText = require('@material-ui/core/FormHelperText');
var Input = require('@material-ui/core/Input');
var InputAdornment = require('@material-ui/core/InputAdornment');
var InputLabel = require('@material-ui/core/InputLabel');
var AttachFileIcon = require('@material-ui/icons/AttachFile');
var styles$1 = require('@material-ui/core/styles');
var DefaultThumbnail = require('@material-ui/icons/AddPhotoAlternate');
var BrowseImage = require('@material-ui/icons/ImageSearch');
var Accordion = require('@material-ui/core/Accordion');
var AccordionDetails = require('@material-ui/core/AccordionDetails');
var AccordionSummary = require('@material-ui/core/AccordionSummary');
var Grid = require('@material-ui/core/Grid');
var Typography = require('@material-ui/core/Typography');
var ExpandMoreIcon = require('@material-ui/icons/ExpandMore');
var DialogActions = require('@material-ui/core/DialogActions');
var Select = require('@material-ui/core/Select');
var Snackbar = require('@material-ui/core/Snackbar');

function _interopDefaultLegacy(e) {
  return e && typeof e === 'object' && 'default' in e ? e : { default: e };
}

var Divider__default = /*#__PURE__*/ _interopDefaultLegacy(Divider);
var IconButton__default = /*#__PURE__*/ _interopDefaultLegacy(IconButton);
var ListItemIcon__default = /*#__PURE__*/ _interopDefaultLegacy(ListItemIcon);
var ListItemText__default = /*#__PURE__*/ _interopDefaultLegacy(ListItemText);
var Menu__default = /*#__PURE__*/ _interopDefaultLegacy(Menu);
var MenuItem__default = /*#__PURE__*/ _interopDefaultLegacy(MenuItem);
var TableBody__default = /*#__PURE__*/ _interopDefaultLegacy(TableBody);
var TableCell__default = /*#__PURE__*/ _interopDefaultLegacy(TableCell);
var TableHead__default = /*#__PURE__*/ _interopDefaultLegacy(TableHead);
var TablePagination__default = /*#__PURE__*/ _interopDefaultLegacy(
  TablePagination
);
var TableRow__default = /*#__PURE__*/ _interopDefaultLegacy(TableRow);
var TableSortLabel__default = /*#__PURE__*/ _interopDefaultLegacy(
  TableSortLabel
);
var Tooltip__default = /*#__PURE__*/ _interopDefaultLegacy(Tooltip);
var MenuIcon__default = /*#__PURE__*/ _interopDefaultLegacy(MenuIcon);
var React__default = /*#__PURE__*/ _interopDefaultLegacy(React);
var DeleteIcon__default = /*#__PURE__*/ _interopDefaultLegacy(DeleteIcon);
var EditIcon__default = /*#__PURE__*/ _interopDefaultLegacy(EditIcon);
var CloneIcon__default = /*#__PURE__*/ _interopDefaultLegacy(CloneIcon);
var InfoIcon__default = /*#__PURE__*/ _interopDefaultLegacy(InfoIcon);
var Dialog__default = /*#__PURE__*/ _interopDefaultLegacy(Dialog);
var DialogContent__default = /*#__PURE__*/ _interopDefaultLegacy(DialogContent);
var DialogContentText__default = /*#__PURE__*/ _interopDefaultLegacy(
  DialogContentText
);
var DialogTitle__default = /*#__PURE__*/ _interopDefaultLegacy(DialogTitle);
var Slide__default = /*#__PURE__*/ _interopDefaultLegacy(Slide);
var CircularProgress__default = /*#__PURE__*/ _interopDefaultLegacy(
  CircularProgress
);
var FormControl__default = /*#__PURE__*/ _interopDefaultLegacy(FormControl);
var TextField__default = /*#__PURE__*/ _interopDefaultLegacy(TextField);
var Autocomplete__default = /*#__PURE__*/ _interopDefaultLegacy(Autocomplete);
var Button__default = /*#__PURE__*/ _interopDefaultLegacy(Button);
var FormHelperText__default = /*#__PURE__*/ _interopDefaultLegacy(
  FormHelperText
);
var Input__default = /*#__PURE__*/ _interopDefaultLegacy(Input);
var InputAdornment__default = /*#__PURE__*/ _interopDefaultLegacy(
  InputAdornment
);
var InputLabel__default = /*#__PURE__*/ _interopDefaultLegacy(InputLabel);
var AttachFileIcon__default = /*#__PURE__*/ _interopDefaultLegacy(
  AttachFileIcon
);
var DefaultThumbnail__default = /*#__PURE__*/ _interopDefaultLegacy(
  DefaultThumbnail
);
var BrowseImage__default = /*#__PURE__*/ _interopDefaultLegacy(BrowseImage);
var Accordion__default = /*#__PURE__*/ _interopDefaultLegacy(Accordion);
var AccordionDetails__default = /*#__PURE__*/ _interopDefaultLegacy(
  AccordionDetails
);
var AccordionSummary__default = /*#__PURE__*/ _interopDefaultLegacy(
  AccordionSummary
);
var Grid__default = /*#__PURE__*/ _interopDefaultLegacy(Grid);
var Typography__default = /*#__PURE__*/ _interopDefaultLegacy(Typography);
var ExpandMoreIcon__default = /*#__PURE__*/ _interopDefaultLegacy(
  ExpandMoreIcon
);
var DialogActions__default = /*#__PURE__*/ _interopDefaultLegacy(DialogActions);
var Select__default = /*#__PURE__*/ _interopDefaultLegacy(Select);
var Snackbar__default = /*#__PURE__*/ _interopDefaultLegacy(Snackbar);

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function');
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ('value' in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true,
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends =
    Object.assign ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

  return _extends.apply(this, arguments);
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly)
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(
          target,
          key,
          Object.getOwnPropertyDescriptor(source, key)
        );
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError('Super expression must either be null or a function');
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true,
    },
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf
    ? Object.getPrototypeOf
    : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
      };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf =
    Object.setPrototypeOf ||
    function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === 'undefined' || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === 'function') return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError(
      "this hasn't been initialised - super() hasn't been called"
    );
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === 'object' || typeof call === 'function')) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _slicedToArray(arr, i) {
  return (
    _arrayWithHoles(arr) ||
    _iterableToArrayLimit(arr, i) ||
    _unsupportedIterableToArray(arr, i) ||
    _nonIterableRest()
  );
}

function _toConsumableArray(arr) {
  return (
    _arrayWithoutHoles(arr) ||
    _iterableToArray(arr) ||
    _unsupportedIterableToArray(arr) ||
    _nonIterableSpread()
  );
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== 'undefined' && Symbol.iterator in Object(iter))
    return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === 'undefined' || !(Symbol.iterator in Object(arr)))
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (
      var _i = arr[Symbol.iterator](), _s;
      !(_n = (_s = _i.next()).done);
      _n = true
    ) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i['return'] != null) _i['return']();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError(
    'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
  );
}

function _nonIterableRest() {
  throw new TypeError(
    'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
  );
}

function toVal(mix) {
  var k,
    y,
    str = '';

  if (typeof mix === 'string' || typeof mix === 'number') {
    str += mix;
  } else if (typeof mix === 'object') {
    if (Array.isArray(mix)) {
      for (k = 0; k < mix.length; k++) {
        if (mix[k]) {
          if ((y = toVal(mix[k]))) {
            str && (str += ' ');
            str += y;
          }
        }
      }
    } else {
      for (k in mix) {
        if (mix[k]) {
          str && (str += ' ');
          str += k;
        }
      }
    }
  }

  return str;
}

function clsx() {
  var i = 0,
    tmp,
    x,
    str = '';
  while (i < arguments.length) {
    if ((tmp = arguments[i++])) {
      if ((x = toVal(tmp))) {
        str && (str += ' ');
        str += x;
      }
    }
  }
  return str;
}

function useModal() {
  var _useState = React.useState({
      isOpen: false,
    }),
    _useState2 = _slicedToArray(_useState, 2),
    _useState2$ = _useState2[0],
    isOpen = _useState2$.isOpen,
    data = _useState2$.data,
    setModalState = _useState2[1];

  var open = React.useCallback(
    function (data) {
      setModalState({
        isOpen: true,
        data: data,
      });
    },
    [setModalState]
  );
  var close = React.useCallback(
    function () {
      setModalState({
        isOpen: false,
        data: undefined,
      });
    },
    [setModalState]
  );
  return {
    isOpen: isOpen,
    data: data,
    open: open,
    close: close,
  };
}
function useModals(modalNames) {
  var _useState3 = React.useState(
      modalNames.reduce(function (acc, modalName) {
        return _objectSpread2(
          _objectSpread2({}, acc),
          {},
          _defineProperty({}, modalName, {
            isOpen: false,
          })
        );
      }, {})
    ),
    _useState4 = _slicedToArray(_useState3, 2),
    modalState = _useState4[0],
    setModalState = _useState4[1];

  var open = function open(modalName) {
    return function (data) {
      return setModalState(function (oldState) {
        return _objectSpread2(
          _objectSpread2({}, oldState),
          {},
          _defineProperty({}, modalName, {
            isOpen: true,
            data: data,
          })
        );
      });
    };
  };

  var close = function close(modalName) {
    return function () {
      return setModalState(function (oldState) {
        return _objectSpread2(
          _objectSpread2({}, oldState),
          {},
          _defineProperty({}, modalName, {
            isOpen: false,
          })
        );
      });
    };
  };

  return modalNames.reduce(function (acc, modalName) {
    return _objectSpread2(
      _objectSpread2({}, acc),
      {},
      _defineProperty({}, modalName, {
        isOpen: modalState[modalName].isOpen,
        data: modalState[modalName].data,
        open: open(modalName),
        close: close(modalName),
      })
    );
  }, {});
}

function useIncrementalKey() {
  var _useReducer = React.useReducer(function (oldKey) {
      return oldKey + 1;
    }, 0),
    _useReducer2 = _slicedToArray(_useReducer, 2),
    key = _useReducer2[0],
    incrementKey = _useReducer2[1];

  return [key, incrementKey];
}

function uuid() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = (Math.random() * 16) | 0,
      v = c === 'x' ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
}
function deepGet(obj, property, defaultValue) {
  if (!obj) return defaultValue;

  if (/\./g.test(property)) {
    var properties = property.split('.');
    return deepGet(
      obj[properties[0]],
      properties.slice(1).join('.'),
      defaultValue
    );
  } else {
    return [undefined, null].indexOf(obj[property]) === -1
      ? obj[property]
      : defaultValue;
  }
}
function deepSet(obj, property, value) {
  if (/\./g.test(property)) {
    var properties = property.split('.');

    if (!obj[properties[0]]) {
      obj[properties[0]] = {};
    }

    deepSet(obj[properties[0]], properties.slice(1).join('.'), value);
  } else {
    obj[property] = value;
  }
}
function d(value) {
  var marker =
    arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';

  if (typeof value === 'function') {
    return function () {
      for (
        var _len = arguments.length, args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key];
      }

      var res = value.apply(void 0, args);
      console.log(marker, args, res);
      return res;
    };
  } else {
    console.log(marker, value);
    return value;
  }
}
function lett(value, closure) {
  if (value === undefined || value === null) return value;
  return closure(value);
}
function debounce(callback, time) {
  var interval;
  return function () {
    for (
      var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
      _key2 < _len2;
      _key2++
    ) {
      args[_key2] = arguments[_key2];
    }

    interval && clearTimeout(interval);
    interval = setTimeout(function () {
      interval = null;
      callback.apply(void 0, args);
    }, time);
  };
}

var styles = function (theme) {
  return core.createStyles({
    pagination: {
      display: 'flex',
      justifyContent: 'left',
    },
    actionsCol: {
      width: theme.spacing(7),
      padding: 0,
      '&:last-child': {
        padding: 0,
      },
    },
    actionsButton: {
      float: 'right',
    },
    thumbnail: {
      maxWidth: 60,
      maxHeight: 60,
    },
    thumbnailWrapper: {
      width: 1,
      paddingRight: theme.spacing(2),
      textAlign: 'center',
    },
    thumbnailRowWrapper: {
      paddingTop: theme.spacing(1),
      paddingBottom: theme.spacing(1),
      lineHeight: 0,
    },
  });
};

var MenuAction = /*#__PURE__*/ React.forwardRef(function (_ref, ref) {
  var name = _ref.name,
    label = _ref.label,
    color = _ref.color,
    _onClick = _ref.onClick,
    actionTarget = _ref.actionTarget,
    closeActionsMenu = _ref.closeActionsMenu,
    Icon = _ref.Icon;
  if (name === 'divider')
    return /*#__PURE__*/ React__default['default'].createElement(
      Divider__default['default'],
      null
    );
  if (!_onClick || !closeActionsMenu || !Icon) return null;
  return /*#__PURE__*/ React__default['default'].createElement(
    MenuItem__default['default'],
    {
      ref: ref,
      style: {
        color: color || 'default',
      },
      onClick: function onClick() {
        _onClick(actionTarget);

        closeActionsMenu();
      },
    },
    /*#__PURE__*/ React__default['default'].createElement(
      ListItemIcon__default['default'],
      null,
      /*#__PURE__*/ React__default['default'].createElement(Icon, null)
    ),
    /*#__PURE__*/ React__default['default'].createElement(
      ListItemText__default['default'],
      {
        primary: label,
      }
    )
  );
});

var DVKTable = /*#__PURE__*/ (function (_Component) {
  _inherits(DVKTable, _Component);

  var _super = _createSuper(DVKTable);

  function DVKTable() {
    var _this;

    _classCallCheck(this, DVKTable);

    for (
      var _len = arguments.length, args = new Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), 'state', {
      actionsMenuAnchor: undefined,
      actionTarget: undefined,
    });

    _defineProperty(
      _assertThisInitialized(_this),
      'createSortHandler',
      function (property) {
        return function () {
          _this.handleSort(property);
        };
      }
    );

    _defineProperty(_assertThisInitialized(_this), 'handleSort', function (
      property
    ) {
      var _this$props = _this.props,
        onPaginationSortUpdate = _this$props.onPaginationSortUpdate,
        sort = _this$props.sort,
        pagination = _this$props.pagination;
      if (!onPaginationSortUpdate) return;

      var _ref2 = sort || {
          orderBy: '',
          order: '',
        },
        orderBy = _ref2.orderBy,
        order = _ref2.order;

      var newOrder = orderBy === property && order === 'asc' ? 'desc' : 'asc';
      onPaginationSortUpdate(
        pagination
          ? _objectSpread2(
              _objectSpread2({}, pagination),
              {},
              {
                page: 0,
              }
            )
          : undefined,
        {
          order: newOrder,
          orderBy: property,
        }
      );
    });

    _defineProperty(
      _assertThisInitialized(_this),
      'handleChangePage',
      function (_event, page) {
        var _this$props2 = _this.props,
          onPaginationSortUpdate = _this$props2.onPaginationSortUpdate,
          sort = _this$props2.sort,
          pagination = _this$props2.pagination;
        if (!onPaginationSortUpdate || !pagination) return;
        onPaginationSortUpdate(
          _objectSpread2(
            _objectSpread2({}, pagination),
            {},
            {
              page: page,
            }
          ),
          sort
        );
      }
    );

    _defineProperty(
      _assertThisInitialized(_this),
      'closeActionsMenu',
      function () {
        return _this.setState({
          actionsMenuAnchor: undefined,
          actionTarget: undefined,
        });
      }
    );

    return _this;
  }

  _createClass(DVKTable, [
    {
      key: 'renderCell',
      value: function renderCell(row, column) {
        var classes = this.props.classes;

        if (column.type === 'imageBase64') {
          var imgData = deepGet(row, column.name);
          return /*#__PURE__*/ React__default['default'].createElement(
            TableCell__default['default'],
            {
              key: column.name,
              className: clsx(
                classes.thumbnailWrapper,
                classes.thumbnailRowWrapper
              ),
            },
            imgData &&
              /*#__PURE__*/ React__default['default'].createElement('img', {
                className: classes.thumbnail,
                src: imgData,
                alt: ''.concat(row.id, '-').concat(column.name),
              })
          );
        }

        var value = deepGet(row, column.name);
        return /*#__PURE__*/ React__default['default'].createElement(
          TableCell__default['default'],
          {
            key: column.name,
            align: column.type === 'number' ? 'right' : 'left',
          },
          column.project ? column.project(value) : value
        );
      },
    },
    {
      key: 'renderActions',
      value: function renderActions(row) {
        var _this2 = this;

        var classes = this.props.classes;
        return /*#__PURE__*/ React__default['default'].createElement(
          TableCell__default['default'],
          {
            className: classes.actionsCol,
          },
          /*#__PURE__*/ React__default['default'].createElement(
            IconButton__default['default'],
            {
              className: classes.actionsButton,
              'aria-controls': 'actions-menu',
              'aria-haspopup': 'true',
              onClick: function onClick(event) {
                event.stopPropagation();

                _this2.setState({
                  actionsMenuAnchor: event.currentTarget,
                  actionTarget: row,
                });
              },
            },
            /*#__PURE__*/ React__default['default'].createElement(
              MenuIcon__default['default'],
              null
            )
          )
        );
      },
    },
    {
      key: 'renderTable',
      value: function renderTable() {
        var _this3 = this;

        var _this$props3 = this.props,
          classes = _this$props3.classes,
          className = _this$props3.className,
          rows = _this$props3.rows,
          columns = _this$props3.columns,
          onRowClick = _this$props3.onRowClick,
          actions = _this$props3.actions,
          pagination = _this$props3.pagination,
          sort = _this$props3.sort,
          total = _this$props3.total;
        var emptyRows =
          (pagination &&
            total &&
            pagination.rowsPerPage -
              Math.min(
                pagination.rowsPerPage,
                total - pagination.page * pagination.rowsPerPage
              )) ||
          0;
        return /*#__PURE__*/ React__default['default'].createElement(
          core.Table,
          {
            className: className,
          },
          /*#__PURE__*/ React__default['default'].createElement(
            TableHead__default['default'],
            null,
            /*#__PURE__*/ React__default['default'].createElement(
              TableRow__default['default'],
              null,
              columns.map(function (column) {
                return /*#__PURE__*/ React__default['default'].createElement(
                  TableCell__default['default'],
                  {
                    key: column.name,
                    align: column.type === 'number' ? 'right' : 'left',
                    sortDirection:
                      sort && sort.orderBy === column.name ? sort.order : false,
                  },
                  sort !== undefined && !column.noSort
                    ? /*#__PURE__*/ React__default['default'].createElement(
                        Tooltip__default['default'],
                        {
                          title: 'Sort',
                          placement:
                            column.type === 'number'
                              ? 'bottom-end'
                              : 'bottom-start',
                          enterDelay: 300,
                        },
                        /*#__PURE__*/ React__default['default'].createElement(
                          TableSortLabel__default['default'],
                          {
                            active:
                              (sort && sort.orderBy === column.name) ||
                              undefined,
                            direction: (sort && sort.order) || undefined,
                            onClick: _this3.createSortHandler(column.name),
                          },
                          column.label
                        )
                      )
                    : /*#__PURE__*/ React__default['default'].createElement(
                        React__default['default'].Fragment,
                        null,
                        column.label
                      )
                );
              }),
              actions &&
                /*#__PURE__*/ React__default['default'].createElement(
                  TableCell__default['default'],
                  {
                    className: classes.actionsCol,
                  }
                )
            )
          ),
          /*#__PURE__*/ React__default['default'].createElement(
            TableBody__default['default'],
            null,
            rows.map(function (row) {
              return /*#__PURE__*/ React__default['default'].createElement(
                TableRow__default['default'],
                {
                  key: row.id || row.syntheticId,
                  hover: !!onRowClick,
                  style: {
                    cursor: onRowClick ? 'pointer' : 'inherit',
                  },
                  onClick: function onClick() {
                    return onRowClick && onRowClick(row);
                  },
                },
                columns.map(function (column) {
                  return _this3.renderCell(row, column);
                }),
                actions && _this3.renderActions(row)
              );
            }),
            emptyRows > 0 &&
              /*#__PURE__*/ React__default['default'].createElement(
                TableRow__default['default'],
                {
                  style: {
                    height: 48 * emptyRows,
                  },
                },
                /*#__PURE__*/ React__default['default'].createElement(
                  TableCell__default['default'],
                  {
                    colSpan: columns.length + (actions ? 1 : 0),
                  }
                )
              )
          )
        );
      },
    },
    {
      key: 'renderPagination',
      value: function renderPagination() {
        var _this$props4 = this.props,
          pagination = _this$props4.pagination,
          total = _this$props4.total,
          classes = _this$props4.classes;
        if (!total || !pagination) return;
        var rowsPerPage = pagination.rowsPerPage,
          page = pagination.page;
        return /*#__PURE__*/ React__default['default'].createElement(
          TablePagination__default['default'],
          {
            component: 'div',
            backIconButtonProps: {
              'aria-label': 'Previous Page',
            },
            nextIconButtonProps: {
              'aria-label': 'Next Page',
            },
            rowsPerPageOptions: [rowsPerPage],
            count: total,
            rowsPerPage: rowsPerPage,
            page: page,
            onChangePage: this.handleChangePage,
            classes: {
              root: classes.pagination,
            },
          }
        );
      },
    },
    {
      key: 'render',
      value: function render() {
        var _this4 = this;

        var _this$state = this.state,
          actionsMenuAnchor = _this$state.actionsMenuAnchor,
          actionTarget = _this$state.actionTarget;
        var _this$props5 = this.props,
          total = _this$props5.total,
          actions = _this$props5.actions;
        return /*#__PURE__*/ React__default['default'].createElement(
          React__default['default'].Fragment,
          null,
          this.renderTable(),
          total && this.renderPagination(),
          actions &&
            /*#__PURE__*/ React__default['default'].createElement(
              Menu__default['default'],
              {
                id: 'actions-menu',
                anchorEl: actionsMenuAnchor,
                keepMounted: true,
                open: !!actionsMenuAnchor,
                onClose: this.closeActionsMenu,
              },
              actions.map(function (action) {
                return /*#__PURE__*/ React__default['default'].createElement(
                  MenuAction,
                  _extends({}, action, {
                    key: action.name, // this will fail if you have multiple dividers; will find solution when this is a problem
                    closeActionsMenu: _this4.closeActionsMenu,
                    actionTarget: actionTarget,
                  })
                );
              })
            )
        );
      },
    },
  ]);

  return DVKTable;
})(React.Component);

_defineProperty(DVKTable, 'defaultProps', void 0);

var DVKTable$1 = core.withStyles(styles)(DVKTable);

function createDefaultActions(_ref) {
  var _ref$onEdit = _ref.onEdit,
    onEdit =
      _ref$onEdit === void 0
        ? function () {
            return null;
          }
        : _ref$onEdit,
    onClone = _ref.onClone,
    _ref$onDelete = _ref.onDelete,
    onDelete =
      _ref$onDelete === void 0
        ? function () {
            return null;
          }
        : _ref$onDelete;
  return [
    onEdit && {
      name: 'edit',
      label: 'View & Edit',
      Icon: EditIcon__default['default'],
      onClick: onEdit,
    },
    onClone && {
      name: 'clone',
      label: 'Clone',
      Icon: CloneIcon__default['default'],
      onClick: onClone,
    },
    {
      name: 'divider',
    },
    onDelete && {
      name: 'delete',
      label: 'Delete',
      Icon: DeleteIcon__default['default'],
      color: 'red',
      onClick: onDelete,
    },
  ].filter(function (it) {
    return !!it;
  });
}

var SlideUp = /*#__PURE__*/ React.forwardRef(function SlideUp(props, ref) {
  return /*#__PURE__*/ React__default['default'].createElement(
    Slide__default['default'],
    _extends(
      {
        direction: 'up',
        ref: ref,
      },
      props
    )
  );
});

var InfoModal = function InfoModal(_ref) {
  var open = _ref.open,
    message = _ref.message,
    title = _ref.title,
    onClose = _ref.onClose;
  return /*#__PURE__*/ React__default['default'].createElement(
    Dialog__default['default'],
    {
      TransitionComponent: SlideUp,
      open: open,
      onClose: onClose,
      fullWidth: true,
      maxWidth: 'sm',
    },
    /*#__PURE__*/ React__default['default'].createElement(
      DialogTitle__default['default'],
      null,
      title
    ),
    /*#__PURE__*/ React__default['default'].createElement(
      DialogContent__default['default'],
      null,
      message && typeof message === 'string'
        ? /*#__PURE__*/ React__default['default'].createElement(
            DialogContentText__default['default'],
            null,
            message
          )
        : message
    )
  );
};

var FormContext = /*#__PURE__*/ React__default['default'].createContext({
  obj: {},
  updateProperty: function updateProperty() {
    return undefined;
  },
  updatePropertyF: function updatePropertyF() {
    return undefined;
  },
});

var InputCheckbox = function InputCheckbox(_ref) {
  var name = _ref.name,
    label = _ref.label,
    type = _ref.type,
    _ref$required = _ref.required,
    required = _ref$required === void 0 ? false : _ref$required,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$text = _ref.text,
    text = _ref$text === void 0 ? '' : _ref$text,
    _ref$checkboxProps = _ref.checkboxProps,
    checkboxProps = _ref$checkboxProps === void 0 ? {} : _ref$checkboxProps,
    hasError = _ref.hasError,
    message = _ref.message;

  var _useContext = React.useContext(FormContext),
    obj = _useContext.obj,
    updateProperty = _useContext.updateProperty;

  var useLabelAsText = !text;
  var checkboxText = useLabelAsText ? label + (required ? ' *' : '') : text;
  return /*#__PURE__*/ React__default['default'].createElement(
    React__default['default'].Fragment,
    null,
    /*#__PURE__*/ React__default['default'].createElement(
      core.FormControl,
      {
        margin: 'dense',
        fullWidth: true,
        required: required,
        error: hasError,
        component: 'fieldset',
      },
      !useLabelAsText &&
        /*#__PURE__*/ React__default['default'].createElement(
          core.FormLabel,
          {
            component: 'legend',
          },
          label
        ),
      /*#__PURE__*/ React__default['default'].createElement(
        core.FormControlLabel,
        {
          control: /*#__PURE__*/ React__default['default'].createElement(
            core.Checkbox,
            _extends({}, checkboxProps, {
              checked: !!deepGet(obj, name, false),
              onChange: updateProperty(name, type),
              value: true,
            })
          ),
          label: checkboxText,
          disabled: disabled,
        }
      ),
      message &&
        /*#__PURE__*/ React__default['default'].createElement(
          core.FormHelperText,
          null,
          message
        )
    )
  );
};

function filterDuplicates(options) {
  var uniqueSet = new Set();
  return options.filter(function (option) {
    var key = option.name || option;
    if (uniqueSet.has(key)) return false;
    return !!uniqueSet.add(key);
  });
}

var InputComboBox = function InputComboBox(_ref) {
  var name = _ref.name,
    label = _ref.label,
    type = _ref.type,
    _ref$required = _ref.required,
    required = _ref$required === void 0 ? false : _ref$required,
    _ref$autoFocus = _ref.autoFocus,
    autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$multiple = _ref.multiple,
    multiple = _ref$multiple === void 0 ? false : _ref$multiple,
    staticOptions = _ref.options,
    search = _ref.search,
    _ref$renderOption = _ref.renderOption,
    renderOption =
      _ref$renderOption === void 0
        ? function (opt) {
            return opt.label || opt;
          }
        : _ref$renderOption,
    hasError = _ref.hasError,
    message = _ref.message;

  var _useContext = React.useContext(FormContext),
    obj = _useContext.obj,
    updateProperty = _useContext.updateProperty;

  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];

  var _useState3 = React.useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    loading = _useState4[0],
    setLoading = _useState4[1];

  var _useState5 = React.useState(''),
    _useState6 = _slicedToArray(_useState5, 2),
    inputValue = _useState6[0],
    setInputValue = _useState6[1];

  var _useState7 = React.useState(staticOptions || []),
    _useState8 = _slicedToArray(_useState7, 2),
    options = _useState8[0],
    setOptions = _useState8[1];

  var debouncedSearch = React.useMemo(
    function () {
      return (
        search &&
        debounce(function (input, callback) {
          search(input).then(callback);
        }, 200)
      );
    },
    [search]
  );

  var getOptionSelected = function getOptionSelected(option, value) {
    return option.name ? option.name === value.name : option === value;
  };

  var multipleValue = multiple
    ? (
        lett(deepGet(obj, name, []), function (names) {
          return names.map(function (name) {
            return options.find(function (opt) {
              return opt.name === name || opt === name;
            });
          });
        }) || []
      ).filter(function (value) {
        return options.some(function (opt) {
          return opt.name === value || opt === value;
        });
      })
    : undefined;
  var simpleValue = !multiple
    ? lett(deepGet(obj, name, null), function (name) {
        return options.find(function (opt) {
          return name === (opt.name || opt);
        });
      }) || null
    : undefined;
  React.useEffect(
    function () {
      var active = true;

      if (!debouncedSearch) {
        return undefined;
      }

      setLoading(true);
      debouncedSearch(inputValue, function (results) {
        setLoading(false);

        if (active) {
          setOptions(
            multiple
              ? function (oldOptions) {
                  return filterDuplicates(
                    [].concat(
                      _toConsumableArray(
                        oldOptions.filter(function (option) {
                          return !!multipleValue.find(function (value) {
                            return getOptionSelected(option, value);
                          });
                        })
                      ),
                      _toConsumableArray(results)
                    )
                  );
                }
              : results
          );
        }
      });
      return function () {
        active = false;
      };
    },
    [staticOptions, inputValue, debouncedSearch, setLoading]
  );
  return /*#__PURE__*/ React__default['default'].createElement(
    FormControl__default['default'],
    {
      disabled: disabled,
      error: hasError,
      required: required,
      fullWidth: true,
      margin: 'dense',
    },
    /*#__PURE__*/ React__default['default'].createElement(
      Autocomplete__default['default'],
      {
        value: multiple ? multipleValue : simpleValue,
        onChange: function onChange(_, newValue) {
          updateProperty(
            name,
            type
          )(
            multiple
              ? newValue.map(function (value) {
                  return value.name || value;
                })
              : newValue
          );
        },
        open: open,
        multiple: multiple,
        disabled: disabled,
        onOpen: function onOpen() {
          return setOpen(true);
        },
        onClose: function onClose() {
          setOpen(false);
          setInputValue('');
        },
        options: options,
        getOptionSelected: getOptionSelected,
        filterOptions: search
          ? function (options) {
              return options;
            }
          : Autocomplete.createFilterOptions(),
        getOptionLabel: function getOptionLabel(option) {
          return option.label || option;
        },
        inputValue: multiple ? inputValue : undefined,
        renderOption: renderOption,
        renderInput: function renderInput(params) {
          return /*#__PURE__*/ React__default['default'].createElement(
            TextField__default['default'],
            _extends({}, params, {
              onChange: function onChange(event) {
                return setInputValue(event.target.value);
              },
              name: name,
              label: label + (required ? ' *' : ''),
              margin: 'dense',
              fullWidth: true,
              autoFocus: autoFocus,
              error: hasError,
              helperText: message,
              InputProps: _objectSpread2(
                _objectSpread2({}, params.InputProps),
                {},
                {
                  endAdornment: /*#__PURE__*/ React__default[
                    'default'
                  ].createElement(
                    React__default['default'].Fragment,
                    null,
                    search && loading && open
                      ? /*#__PURE__*/ React__default['default'].createElement(
                          CircularProgress__default['default'],
                          {
                            color: 'inherit',
                            size: 20,
                          }
                        )
                      : null,
                    params.InputProps.endAdornment
                  ),
                }
              ),
            })
          );
        },
      }
    )
  );
};

var InputDateTime = function InputDateTime(_ref) {
  var name = _ref.name,
    label = _ref.label,
    type = _ref.type,
    _ref$required = _ref.required,
    required = _ref$required === void 0 ? false : _ref$required,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    hasError = _ref.hasError,
    message = _ref.message;

  var _useContext = React.useContext(FormContext),
    obj = _useContext.obj,
    updateProperty = _useContext.updateProperty;

  var commonProps = {
    fullWidth: true,
    autoOk: true,
    margin: 'normal',
    name: name,
    label: label,
    required: required,
    disabled: disabled,
    value: deepGet(obj, name, null),
    onChange: updateProperty(name, type),
    error: hasError,
    helperText: message,
  };

  switch (type) {
    case 'date-time':
      return /*#__PURE__*/ React__default['default'].createElement(
        pickers.DateTimePicker,
        _extends(
          {
            ampm: false,
          },
          commonProps
        )
      );

    case 'time':
      return /*#__PURE__*/ React__default['default'].createElement(
        pickers.TimePicker,
        _extends(
          {
            ampm: false,
          },
          commonProps
        )
      );

    case 'date':
      return /*#__PURE__*/ React__default['default'].createElement(
        pickers.DatePicker,
        commonProps
      );
  }
};

var InputDefault = function InputDefault(_ref) {
  var name = _ref.name,
    label = _ref.label,
    type = _ref.type,
    _ref$required = _ref.required,
    required = _ref$required === void 0 ? false : _ref$required,
    _ref$autoFocus = _ref.autoFocus,
    autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$multiline = _ref.multiline,
    multiline = _ref$multiline === void 0 ? false : _ref$multiline,
    _ref$autoComplete = _ref.autoComplete,
    autoComplete = _ref$autoComplete === void 0 ? name : _ref$autoComplete,
    hasError = _ref.hasError,
    message = _ref.message;

  var _useContext = React.useContext(FormContext),
    obj = _useContext.obj,
    updateProperty = _useContext.updateProperty;

  return /*#__PURE__*/ React__default['default'].createElement(
    TextField__default['default'],
    {
      name: name,
      label: label,
      autoFocus: autoFocus,
      type: type,
      autoComplete: autoComplete,
      multiline: multiline,
      rows: 4,
      rowsMax: 10,
      required: required,
      disabled: disabled,
      margin: 'dense',
      fullWidth: true,
      value: deepGet(obj, name, ''),
      onChange: updateProperty(name, type),
      error: hasError,
      helperText: message,
    }
  );
};

var useStyles = styles$1.makeStyles(function (theme) {
  return {
    expansionPanelContent: {
      overflow: 'hidden',
    },
    expansionPanelTable: {
      marginLeft: theme.spacing(-3),
      marginRight: theme.spacing(-3),
    },
    expansionPanelNoContent: {
      marginLeft: theme.spacing(3),
      marginRight: theme.spacing(3),
    },
    expansionPanelHeading: {
      fontSize: theme.typography.pxToRem(15),
      fontWeight: theme.typography.fontWeightRegular,
    },
    expansionPanelButtonsWrapper: {
      marginTop: theme.spacing(1),
    },
    iconLeft: {
      marginRight: theme.spacing(1),
    },
    thumbnail: {
      maxWidth: 75,
      maxHeight: 75,
      marginBottom: theme.spacing(0.5),
    },
    thumbnailWrapper: {
      maxHeight: 'initial',
      height: 'initial',
    },
  };
});

var InputFile = function InputFile(_ref) {
  var name = _ref.name,
    label = _ref.label,
    type = _ref.type,
    _ref$required = _ref.required,
    required = _ref$required === void 0 ? false : _ref$required,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    acceptedFileType = _ref.acceptedFileType,
    multiple = _ref.multiple,
    hasError = _ref.hasError,
    message = _ref.message;

  var _useContext = React.useContext(FormContext),
    obj = _useContext.obj,
    updateProperty = _useContext.updateProperty;

  var classes = useStyles();

  var _useState = React.useState(
      deepGet(obj, ''.concat(name, '.fileName'), '')
    ),
    _useState2 = _slicedToArray(_useState, 2),
    selectedFileName = _useState2[0],
    setSelectedFileName = _useState2[1];

  var inputRef = React.useRef(null);

  function onFileSelected(_ref2) {
    var files = _ref2.target.files;
    if (!files) return;
    var listFiles = Array.from(files);
    var fileName = listFiles
      .map(function (file) {
        return file.name;
      })
      .join();
    setSelectedFileName(fileName);
    updateProperty(name, type)(listFiles);
  }

  function clearField(e) {
    if (null !== inputRef.current) {
      inputRef.current.value = ''; // TS is stupid and keeps saying the
    }

    e.stopPropagation();
    e.preventDefault();
    setSelectedFileName('');
    updateProperty(name, type)(null);
  }

  return /*#__PURE__*/ React__default['default'].createElement(
    React__default['default'].Fragment,
    null,
    /*#__PURE__*/ React__default['default'].createElement('input', {
      accept: acceptedFileType,
      style: {
        display: 'none',
      },
      id: ''.concat(name, '-hidden'),
      type: 'file',
      onChange: onFileSelected,
      multiple: multiple,
      ref: inputRef,
    }),
    /*#__PURE__*/ React__default['default'].createElement(
      'label',
      {
        htmlFor: ''.concat(name, '-hidden'),
      },
      /*#__PURE__*/ React__default['default'].createElement(
        FormControl__default['default'],
        {
          fullWidth: true,
          margin: 'dense',
        },
        /*#__PURE__*/ React__default['default'].createElement(
          InputLabel__default['default'],
          {
            htmlFor: name,
            error: hasError,
          },
          label + (required ? ' *' : '')
        ),
        /*#__PURE__*/ React__default['default'].createElement(
          Input__default['default'],
          {
            id: name,
            type: 'text',
            disabled: disabled,
            required: required,
            value: selectedFileName,
            endAdornment: /*#__PURE__*/ React__default['default'].createElement(
              InputAdornment__default['default'],
              {
                position: 'end',
              },
              /*#__PURE__*/ React__default['default'].createElement(
                Button__default['default'],
                {
                  component: 'span',
                },
                /*#__PURE__*/ React__default['default'].createElement(
                  AttachFileIcon__default['default'],
                  {
                    className: classes.iconLeft,
                  }
                ),
                'Attach'
              ),
              selectedFileName &&
                /*#__PURE__*/ React__default['default'].createElement(
                  IconButton__default['default'],
                  {
                    'aria-label': 'Remove selected files',
                    onClick: clearField,
                  },
                  /*#__PURE__*/ React__default['default'].createElement(
                    DeleteIcon__default['default'],
                    null
                  )
                )
            ),
            inputProps: {
              disabled: true,
            },
            error: hasError,
            'aria-describedby': ''.concat(name, '-helper'),
          }
        ),
        hasError &&
          /*#__PURE__*/ React__default['default'].createElement(
            FormHelperText__default['default'],
            {
              id: ''.concat(name, '-helper'),
              error: true,
            },
            message
          )
      )
    )
  );
};

var InputHidden = function InputHidden(_ref) {
  var name = _ref.name,
    type = _ref.type;

  var _useContext = React.useContext(FormContext),
    obj = _useContext.obj;

  return /*#__PURE__*/ React__default['default'].createElement(
    TextField__default['default'],
    {
      name: name,
      type: type,
      disabled: true,
      hidden: true,
      value: deepGet(obj, name, ''),
    }
  );
};

var InputImage = function InputImage(_ref) {
  var name = _ref.name,
    label = _ref.label,
    type = _ref.type,
    _ref$autoFocus = _ref.autoFocus,
    autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,
    _ref$required = _ref.required,
    required = _ref$required === void 0 ? false : _ref$required,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    hasError = _ref.hasError,
    message = _ref.message;

  var _useContext = React.useContext(FormContext),
    obj = _useContext.obj,
    updateProperty = _useContext.updateProperty;

  var classes = useStyles();

  var _useState = React.useState(
      deepGet(obj, ''.concat(name, '.fileName'), '')
    ),
    _useState2 = _slicedToArray(_useState, 2),
    selectedFileName = _useState2[0],
    setSelectedFileName = _useState2[1];

  var _useState3 = React.useState(
      deepGet(obj, ''.concat(name, '.thumbnail'), undefined)
    ),
    _useState4 = _slicedToArray(_useState3, 2),
    thumbnail = _useState4[0],
    setThumbnail = _useState4[1];

  var fileReader = React.useMemo(function () {
    return new FileReader();
  }, []);
  React.useEffect(
    function () {
      fileReader.onload = function () {
        setThumbnail(fileReader.result);
      };
    },
    [fileReader]
  );

  function onFileSelected(_ref2) {
    var files = _ref2.target.files;
    if (!files || !files[0]) return;
    var file = files[0];
    setSelectedFileName(file.name);
    fileReader.readAsDataURL(file);
    updateProperty(name, type)(file);
  }

  function clearField(e) {
    e.stopPropagation();
    e.preventDefault();
    setSelectedFileName('');
    setThumbnail(undefined);
    updateProperty(name, type)(null);
  }

  return /*#__PURE__*/ React__default['default'].createElement(
    React__default['default'].Fragment,
    null,
    /*#__PURE__*/ React__default['default'].createElement('input', {
      accept: 'image/*',
      style: {
        display: 'none',
      },
      id: ''.concat(name, '-hidden'),
      type: 'file',
      onChange: onFileSelected,
    }),
    /*#__PURE__*/ React__default['default'].createElement(
      'label',
      {
        htmlFor: ''.concat(name, '-hidden'),
      },
      /*#__PURE__*/ React__default['default'].createElement(
        FormControl__default['default'],
        {
          fullWidth: true,
          margin: 'dense',
        },
        /*#__PURE__*/ React__default['default'].createElement(
          InputLabel__default['default'],
          {
            htmlFor: name,
            error: hasError,
          },
          label + (required ? ' *' : '')
        ),
        /*#__PURE__*/ React__default['default'].createElement(
          Input__default['default'],
          {
            id: name,
            type: 'text',
            disabled: disabled,
            autoFocus: autoFocus,
            required: required,
            value: selectedFileName,
            startAdornment: /*#__PURE__*/ React__default[
              'default'
            ].createElement(
              InputAdornment__default['default'],
              {
                position: 'start',
                className: classes.thumbnailWrapper,
              },
              thumbnail
                ? /*#__PURE__*/ React__default['default'].createElement('img', {
                    src: thumbnail,
                    alt: ''.concat(name, '-thumbnail'),
                    className: classes.thumbnail,
                  })
                : /*#__PURE__*/ React__default['default'].createElement(
                    DefaultThumbnail__default['default'],
                    {
                      fontSize: 'large',
                    }
                  )
            ),
            endAdornment: /*#__PURE__*/ React__default['default'].createElement(
              InputAdornment__default['default'],
              {
                position: 'end',
              },
              /*#__PURE__*/ React__default['default'].createElement(
                Button__default['default'],
                {
                  component: 'span',
                },
                /*#__PURE__*/ React__default['default'].createElement(
                  BrowseImage__default['default'],
                  {
                    className: classes.iconLeft,
                  }
                ),
                'Browse'
              ),
              selectedFileName &&
                /*#__PURE__*/ React__default['default'].createElement(
                  IconButton__default['default'],
                  {
                    'aria-label': 'Remove selected image',
                    onClick: clearField,
                  },
                  /*#__PURE__*/ React__default['default'].createElement(
                    DeleteIcon__default['default'],
                    null
                  )
                )
            ),
            inputProps: {
              disabled: true,
            },
            error: hasError,
            'aria-describedby': ''.concat(name, '-helper'),
          }
        ),
        hasError &&
          /*#__PURE__*/ React__default['default'].createElement(
            FormHelperText__default['default'],
            {
              id: ''.concat(name, '-helper'),
              error: true,
            },
            message
          )
      )
    )
  );
};

var ConfirmationModal = function ConfirmationModal(_ref) {
  var open = _ref.open,
    message = _ref.message,
    title = _ref.title,
    onCancel = _ref.onCancel,
    onAccept = _ref.onAccept,
    children = _ref.children;

  var renderActions = function renderActions() {
    return /*#__PURE__*/ React__default['default'].createElement(
      React.Fragment,
      null,
      /*#__PURE__*/ React__default['default'].createElement(
        Button__default['default'],
        {
          onClick: onCancel,
        },
        'Cancel'
      ),
      /*#__PURE__*/ React__default['default'].createElement(
        Button__default['default'],
        {
          onClick: onAccept,
        },
        'Ok'
      )
    );
  };

  return /*#__PURE__*/ React__default['default'].createElement(
    Dialog__default['default'],
    {
      'aria-labelledby': 'confirmation-dialog-title',
      TransitionComponent: SlideUp,
      open: open,
      onClose: onCancel,
      fullWidth: true,
      maxWidth: 'sm',
      'aria-describedby': 'confirmation-dialog-description',
    },
    /*#__PURE__*/ React__default['default'].createElement(
      DialogTitle__default['default'],
      {
        id: 'confirmation-dialog-title',
      },
      title
    ),
    /*#__PURE__*/ React__default['default'].createElement(
      DialogContent__default['default'],
      null,
      /*#__PURE__*/ React__default['default'].createElement(
        DialogContentText__default['default'],
        {
          id: 'confirmation-dialog-description',
        },
        message
      ),
      children
    ),
    /*#__PURE__*/ React__default['default'].createElement(
      DialogActions__default['default'],
      null,
      renderActions()
    )
  );
};

function FlexExpander() {
  return /*#__PURE__*/ React__default['default'].createElement('div', {
    style: {
      flex: 1,
    },
  });
}

function isHiddenField(field) {
  return field.type === 'hidden';
}

var InputList = function InputList(_ref) {
  var name = _ref.name,
    label = _ref.label,
    _ref$newLabel = _ref.newLabel,
    newLabel =
      _ref$newLabel === void 0 ? 'Add new '.concat(name) : _ref$newLabel,
    _ref$editLabel = _ref.editLabel,
    editLabel =
      _ref$editLabel === void 0
        ? function (_ref2) {
            var id = _ref2.id;
            return "Edit '".concat(id, "'");
          }
        : _ref$editLabel,
    _ref$deleteLabel = _ref.deleteLabel,
    deleteLabel =
      _ref$deleteLabel === void 0
        ? function (_ref3) {
            var id = _ref3.id;
            return "Delete '".concat(id, "'");
          }
        : _ref$deleteLabel,
    _ref$deleteMessage = _ref.deleteMessage,
    deleteMessage =
      _ref$deleteMessage === void 0
        ? function () {
            return '';
          }
        : _ref$deleteMessage,
    fields = _ref.fields,
    _ref$accordionProps = _ref.accordionProps,
    accordionProps = _ref$accordionProps === void 0 ? {} : _ref$accordionProps,
    InputModal = _ref.InputModal;

  var _useContext = React.useContext(FormContext),
    obj = _useContext.obj,
    updatePropertyF = _useContext.updatePropertyF;

  var classes = useStyles();

  var _useModal = useModal(),
    isAddModalOpen = _useModal.isOpen,
    openAddModal = _useModal.open,
    closeAddModal = _useModal.close;

  var _useModal2 = useModal(),
    isEditModalOpen = _useModal2.isOpen,
    _useModal2$data = _useModal2.data,
    editModalData = _useModal2$data === void 0 ? {} : _useModal2$data,
    openEditModal = _useModal2.open,
    closeEditModal = _useModal2.close;

  var _useModal3 = useModal(),
    isDeleteModalOpen = _useModal3.isOpen,
    _useModal3$data = _useModal3.data,
    deleteModalData = _useModal3$data === void 0 ? {} : _useModal3$data,
    openDeleteModal = _useModal3.open,
    closeDeleteModal = _useModal3.close;

  var _useIncrementalKey = useIncrementalKey(),
    _useIncrementalKey2 = _slicedToArray(_useIncrementalKey, 2),
    createKey = _useIncrementalKey2[0],
    incrementCreateKey = _useIncrementalKey2[1];

  var values = React.useMemo(
    function () {
      return deepGet(obj, name, []);
    },
    [obj, name]
  );
  var actions = React.useMemo(
    function () {
      return createDefaultActions({
        onEdit: openEditModal,
        onDelete: openDeleteModal,
      });
    },
    [openEditModal, openDeleteModal]
  );

  function isEqual(val1, val2) {
    return (
      (val1.id && val1.id === val2.id) ||
      (val1.syntheticId && val1.syntheticId === val2.syntheticId)
    );
  }

  return /*#__PURE__*/ React__default['default'].createElement(
    Accordion__default['default'],
    _extends(
      {
        defaultExpanded: true,
      },
      accordionProps
    ),
    /*#__PURE__*/ React__default['default'].createElement(
      AccordionSummary__default['default'],
      {
        expandIcon: /*#__PURE__*/ React__default['default'].createElement(
          ExpandMoreIcon__default['default'],
          null
        ),
        'aria-controls': ''.concat(name, '-content'),
        id: ''.concat(name, '-header'),
      },
      /*#__PURE__*/ React__default['default'].createElement(
        Typography__default['default'],
        {
          className: classes.expansionPanelHeading,
        },
        label
      )
    ),
    /*#__PURE__*/ React__default['default'].createElement(
      AccordionDetails__default['default'],
      {
        className: classes.expansionPanelContent,
      },
      /*#__PURE__*/ React__default['default'].createElement(
        Grid__default['default'],
        {
          container: true,
          direction: 'column',
        },
        /*#__PURE__*/ React__default['default'].createElement(
          Grid__default['default'],
          {
            item: true,
            className: classes.expansionPanelTable,
          },
          values.length
            ? /*#__PURE__*/ React__default['default'].createElement(
                DVKTable$1, // cast is safe because we checked it before
                {
                  columns: fields.filter(function (field) {
                    return !isHiddenField(field);
                  }),
                  actions: actions,
                  rows: values,
                  onRowClick: openEditModal,
                }
              )
            : /*#__PURE__*/ React__default['default'].createElement(
                Typography__default['default'],
                {
                  key: name,
                  className: classes.expansionPanelNoContent,
                },
                'No ',
                label.toLowerCase(),
                '. Please add some.'
              )
        ),
        /*#__PURE__*/ React__default['default'].createElement(
          Grid__default['default'],
          {
            item: true,
            container: true,
            className: classes.expansionPanelButtonsWrapper,
          },
          /*#__PURE__*/ React__default['default'].createElement(
            FlexExpander,
            null
          ),
          /*#__PURE__*/ React__default['default'].createElement(
            Button__default['default'],
            {
              onClick: openAddModal,
            },
            'Add'
          )
        )
      )
    ),
    /*#__PURE__*/ React__default['default'].createElement(InputModal, {
      title: newLabel,
      formKey: ''.concat(createKey),
      open: isAddModalOpen,
      fields: fields,
      onClose: closeAddModal,
      onCreate: function onCreate(newValue) {
        updatePropertyF(name, function () {
          var oldValues =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : [];
          return [].concat(_toConsumableArray(oldValues), [
            _objectSpread2(
              _objectSpread2({}, newValue),
              {},
              {
                syntheticId: uuid(),
              }
            ),
          ]);
        });
        incrementCreateKey();
      },
    }),
    /*#__PURE__*/ React__default['default'].createElement(InputModal, {
      title: editLabel(editModalData),
      formKey: editModalData.id || editModalData.syntheticId,
      open: isEditModalOpen,
      fields: fields,
      defaultValue: editModalData,
      saveLabel: 'Save',
      onClose: closeEditModal,
      onCreate: function onCreate(newValue) {
        updatePropertyF(name, function (oldValues) {
          return oldValues.map(function (value) {
            return isEqual(value, newValue) ? newValue : value;
          });
        });
        closeEditModal();
      },
    }),
    /*#__PURE__*/ React__default['default'].createElement(ConfirmationModal, {
      title: deleteLabel(deleteModalData),
      message: deleteMessage(deleteModalData),
      open: isDeleteModalOpen,
      onCancel: closeDeleteModal,
      onAccept: function onAccept() {
        updatePropertyF(name, function (oldValues) {
          return oldValues.filter(function (value) {
            return !isEqual(value, deleteModalData);
          });
        });
        closeDeleteModal();
      },
    })
  );
};

var InputSelect = function InputSelect(_ref) {
  var name = _ref.name,
    label = _ref.label,
    type = _ref.type,
    values = _ref.values,
    _ref$required = _ref.required,
    required = _ref$required === void 0 ? false : _ref$required,
    _ref$autoFocus = _ref.autoFocus,
    autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    hasError = _ref.hasError,
    message = _ref.message;

  var _useContext = React.useContext(FormContext),
    obj = _useContext.obj,
    updateProperty = _useContext.updateProperty;

  return /*#__PURE__*/ React__default['default'].createElement(
    FormControl__default['default'],
    {
      disabled: disabled,
      error: hasError,
      required: required,
      fullWidth: true,
      margin: 'dense',
    },
    /*#__PURE__*/ React__default['default'].createElement(
      InputLabel__default['default'],
      {
        htmlFor: name,
      },
      label
    ),
    /*#__PURE__*/ React__default['default'].createElement(
      Select__default['default'],
      {
        value: deepGet(obj, name, ''),
        onChange: updateProperty(name, type),
        inputProps: {
          name: name,
          id: name,
          autoFocus: autoFocus,
        },
      },
      !required &&
        /*#__PURE__*/ React__default['default'].createElement(
          MenuItem__default['default'],
          {
            value: '',
          },
          /*#__PURE__*/ React__default['default'].createElement(
            'em',
            null,
            'None'
          )
        ),
      values.map(function (value) {
        if (typeof value === 'string')
          return /*#__PURE__*/ React__default['default'].createElement(
            MenuItem__default['default'],
            {
              key: value,
              value: value,
            },
            value
          );
        return /*#__PURE__*/ React__default['default'].createElement(
          MenuItem__default['default'],
          {
            key: value.name,
            value: value.name,
          },
          value.label
        );
      })
    ),
    message &&
      /*#__PURE__*/ React__default['default'].createElement(
        FormHelperText__default['default'],
        null,
        message
      )
  );
};

function convertValue(value, type) {
  switch (type) {
    case 'number':
      return value === '' ? '' : +(value || 0);

    default:
      return value;
  }
}

function strip(value) {
  var newObj = _objectSpread2({}, value);

  delete newObj.__typename;
  delete newObj.syntheticId;
  return newObj;
}

function needsStripping(value) {
  return value.syntheticId || value.__typename;
} // TODO deep check

function stripSyntheticIds(obj) {
  return Object.keys(obj).reduce(function (acc, key) {
    return _objectSpread2(
      _objectSpread2({}, acc),
      {},
      _defineProperty(
        {},
        key,
        Array.isArray(obj[key])
          ? obj[key].map(function (value) {
              return needsStripping(value) ? strip(value) : value;
            })
          : obj[key]
      )
    );
  }, {});
} // these values are used for change detection

var defaultProps = {
  defaultValue: {},
};

var DVKForm = function DVKForm(_ref) {
  var className = _ref.className,
    children = _ref.children,
    bottomContent = _ref.bottomContent,
    _ref$defaultValue = _ref.defaultValue,
    defaultValue =
      _ref$defaultValue === void 0
        ? defaultProps.defaultValue
        : _ref$defaultValue,
    fields = _ref.fields,
    _ref$ContentWrapper = _ref.ContentWrapper,
    ContentWrapper =
      _ref$ContentWrapper === void 0 ? React.Fragment : _ref$ContentWrapper,
    _ref$ActionsWrapper = _ref.ActionsWrapper,
    ActionsWrapper =
      _ref$ActionsWrapper === void 0 ? React.Fragment : _ref$ActionsWrapper,
    _ref$renderActions = _ref.renderActions,
    renderActions = _ref$renderActions === void 0 ? null : _ref$renderActions,
    _ref$onSubmit = _ref.onSubmit,
    onSubmit =
      _ref$onSubmit === void 0
        ? function () {
            return null;
          }
        : _ref$onSubmit,
    _ref$onChange = _ref.onChange,
    onChange =
      _ref$onChange === void 0
        ? function () {
            return null;
          }
        : _ref$onChange,
    _ref$invalidFields = _ref.invalidFields,
    invalidFields = _ref$invalidFields === void 0 ? null : _ref$invalidFields,
    _ref$InputModal = _ref.InputModal,
    InputModal = _ref$InputModal === void 0 ? React.Fragment : _ref$InputModal;

  var _useState = React.useState(_objectSpread2({}, defaultValue)),
    _useState2 = _slicedToArray(_useState, 2),
    obj = _useState2[0],
    setObj = _useState2[1];

  var _useState3 = React.useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    innerInvalidFields = _useState4[0],
    setInnerInvalidFields = _useState4[1];

  var formId = React.useMemo(
    function () {
      setObj(_objectSpread2({}, defaultValue));
      return uuid();
    },
    [defaultValue]
  );

  var _useModal = useModal(),
    isInfoModalOpen = _useModal.isOpen,
    infoModalData = _useModal.data,
    openInfoModal = _useModal.open,
    closeInfoModal = _useModal.close;

  React.useEffect(
    function () {
      onChange(obj);
    },
    [obj, onChange]
  );

  function handleSubmit(event) {
    event.preventDefault();
    event.stopPropagation();
    var requiredFields = fields.filter(function (it) {
      return it.required;
    });
    var requiredErrors = requiredFields
      .map(function (it) {
        return [it.name, deepGet(obj, it.name)];
      })
      .filter(function (_ref2) {
        var _ref3 = _slicedToArray(_ref2, 2),
          value = _ref3[1];

        return value === null || value === undefined || value.length === 0;
      });

    if (requiredErrors.length) {
      setInnerInvalidFields(
        requiredErrors.reduce(function (acc, it) {
          return _objectSpread2(
            _objectSpread2({}, acc),
            {},
            _defineProperty({}, it[0], 'required')
          );
        }, {})
      );
    } else {
      setInnerInvalidFields(null);
      onSubmit(stripSyntheticIds(obj));
    }
  }

  var updateProperty = function updateProperty(property, type) {
    return function (event) {
      var value;

      switch (type) {
        case 'date':
        case 'time':
        case 'date-time':
        case 'image':
        case 'file':
          value = event;
          break;

        case 'combo-box':
          value = event ? event.name || event : null;
          break;

        case 'checkbox':
          value = event.target.checked;
          break;

        default:
          value = event.target.value;
      }

      setObj(function (oldObj) {
        var newObject = _objectSpread2({}, oldObj);

        deepSet(newObject, property, convertValue(value, type));
        return newObject;
      });

      if (innerInvalidFields && innerInvalidFields[property]) {
        setInnerInvalidFields(function (oldInvalidFields) {
          return _objectSpread2(
            _objectSpread2({}, oldInvalidFields),
            {},
            _defineProperty({}, property, false)
          );
        });
      }
    };
  };

  var updatePropertyF = function updatePropertyF(property, update) {
    setObj(function (oldObj) {
      var newObject = _objectSpread2({}, oldObj);

      deepSet(newObject, property, update(deepGet(oldObj, property)));
      return newObject;
    });

    if (innerInvalidFields && innerInvalidFields[property]) {
      setInnerInvalidFields(function (oldInvalidFields) {
        return _objectSpread2(
          _objectSpread2({}, oldInvalidFields),
          {},
          _defineProperty({}, property, false)
        );
      });
    }
  };

  function getErrorMessage(errorMessageCode, errorMessage) {
    if (!errorMessageCode) return;

    if (
      errorMessageCode === 'required' &&
      !(errorMessage && errorMessage['required'])
    ) {
      return 'Please fill out this field';
    }

    if (typeof errorMessage === 'string') return errorMessage;
    var code =
      typeof errorMessageCode === 'string' ? errorMessageCode : 'default';
    if (!errorMessage && typeof errorMessageCode !== 'string')
      return 'Invalid value';
    if (!errorMessage) return code;
    return errorMessage[code];
  }

  function renderInputField(_ref4) {
    var name = _ref4.name,
      label = _ref4.label,
      type = _ref4.type,
      errorMessage = _ref4.errorMessage,
      required = _ref4.required,
      autoFocus = _ref4.autoFocus,
      disabled = _ref4.disabled,
      multiline = _ref4.multiline,
      autoComplete = _ref4.autoComplete,
      acceptedFileType = _ref4.acceptedFileType,
      multiple = _ref4.multiple,
      values = _ref4.values,
      fields = _ref4.fields,
      newLabel = _ref4.newLabel,
      editLabel = _ref4.editLabel,
      deleteLabel = _ref4.deleteLabel,
      deleteMessage = _ref4.deleteMessage,
      accordionProps = _ref4.accordionProps,
      text = _ref4.text,
      checkboxProps = _ref4.checkboxProps,
      options = _ref4.options,
      renderOption = _ref4.renderOption,
      search = _ref4.search;
    var errorMessageCode =
      (innerInvalidFields && innerInvalidFields[name]) ||
      (invalidFields && invalidFields[name]);
    var message = getErrorMessage(errorMessageCode, errorMessage);
    var commonProps = {
      key: name,
      name: name,
      label: label,
      type: type,
    };
    var errorProps = {
      hasError: !!errorMessageCode,
      message: message,
    };

    switch (type) {
      case 'list':
        return /*#__PURE__*/ React__default['default'].createElement(
          InputList,
          _extends({}, commonProps, {
            fields: fields,
            newLabel: newLabel,
            editLabel: editLabel,
            deleteLabel: deleteLabel,
            deleteMessage: deleteMessage,
            accordionProps: accordionProps,
            InputModal: InputModal,
          })
        );

      case 'select':
        return /*#__PURE__*/ React__default['default'].createElement(
          InputSelect,
          _extends(
            {},
            commonProps,
            {
              values: values,
              required: required,
              autoFocus: autoFocus,
              disabled: disabled,
            },
            errorProps
          )
        );

      case 'date':
      case 'time':
      case 'date-time':
        return /*#__PURE__*/ React__default['default'].createElement(
          InputDateTime,
          _extends(
            {},
            commonProps,
            {
              required: required,
              disabled: disabled,
            },
            errorProps
          )
        );

      case 'image':
        return /*#__PURE__*/ React__default['default'].createElement(
          InputImage,
          _extends(
            {},
            commonProps,
            {
              required: required,
              disabled: disabled,
              autoFocus: autoFocus,
            },
            errorProps
          )
        );

      case 'file':
        return /*#__PURE__*/ React__default['default'].createElement(
          InputFile,
          _extends(
            {},
            commonProps,
            {
              required: required,
              disabled: disabled,
              acceptedFileType: acceptedFileType,
              multiple: multiple,
            },
            errorProps
          )
        );

      case 'checkbox':
        return /*#__PURE__*/ React__default['default'].createElement(
          InputCheckbox,
          _extends(
            {},
            commonProps,
            {
              required: required,
              disabled: disabled,
              text: text,
              checkboxProps: checkboxProps,
            },
            errorProps
          )
        );

      case 'hidden':
        return /*#__PURE__*/ React__default['default'].createElement(
          InputHidden,
          commonProps
        );

      case 'combo-box':
        return /*#__PURE__*/ React__default['default'].createElement(
          InputComboBox,
          _extends(
            {},
            commonProps,
            {
              multiple: multiple,
              required: required,
              autoFocus: autoFocus,
              disabled: disabled,
              options: options,
              renderOption: renderOption,
              search: search,
            },
            errorProps
          )
        );

      default:
        return /*#__PURE__*/ React__default['default'].createElement(
          InputDefault,
          _extends(
            {},
            commonProps,
            {
              autoFocus: autoFocus,
              autoComplete: autoComplete,
              multiline: multiline,
              required: required,
              disabled: disabled,
            },
            errorProps
          )
        );
    }
  }

  function renderInputBox(field) {
    return /*#__PURE__*/ React__default['default'].createElement(
      core.Box,
      {
        key: field.name,
        display: 'flex',
        style:
          field.type === 'hidden'
            ? {
                display: 'none',
              }
            : {},
      },
      /*#__PURE__*/ React__default['default'].createElement(
        core.Box,
        {
          flexGrow: 1,
        },
        renderInputField(field)
      ),
      field.infoModal &&
        /*#__PURE__*/ React__default['default'].createElement(
          core.Box,
          {
            display: 'flex',
            justifyContent: 'center',
            flexDirection: 'column',
          },
          /*#__PURE__*/ React__default['default'].createElement(
            core.IconButton,
            _extends(
              {
                size: 'medium',
              },
              field.infoModal.buttonProps || {},
              {
                onClick: function onClick() {
                  return openInfoModal({
                    message: field.infoModal.message,
                    title: field.infoModal.title,
                  });
                },
              }
            ),
            /*#__PURE__*/ React__default['default'].createElement(
              InfoIcon__default['default'],
              null
            )
          )
        )
    );
  }

  return /*#__PURE__*/ React__default['default'].createElement(
    'form',
    {
      key: formId,
      id: formId,
      className: className,
      onSubmit: handleSubmit,
    },
    /*#__PURE__*/ React__default['default'].createElement(
      ContentWrapper,
      null,
      /*#__PURE__*/ React__default['default'].createElement(
        FormContext.Provider,
        {
          value: {
            obj: obj,
            updateProperty: updateProperty,
            updatePropertyF: updatePropertyF,
          },
        },
        children,
        fields
          .map(function (field) {
            return renderInputBox(field);
          })
          .reduce(function (acc, it) {
            return acc.concat(it);
          }, []),
        bottomContent,
        /*#__PURE__*/ React__default['default'].createElement(InfoModal, {
          onClose: closeInfoModal,
          open: isInfoModalOpen,
          message: (infoModalData && infoModalData.message) || '',
          title: (infoModalData && infoModalData.title) || '',
        })
      )
    ),
    /*#__PURE__*/ React__default['default'].createElement(
      ActionsWrapper,
      null,
      renderActions &&
        typeof renderActions === 'function' &&
        renderActions(formId)
    ),
    /*#__PURE__*/ React__default['default'].createElement('button', {
      type: 'submit',
      style: {
        display: 'none',
      },
      form: formId,
    })
  );
};

var useStyles$1 = core.makeStyles(
  {
    fixed: {
      position: 'fixed',
      right: '10px',
      bottom: '10px',
    },
  },
  {
    name: 'fab',
  }
);

var FloatingButton = function FloatingButton(_ref) {
  var onClick = _ref.onClick,
    children = _ref.children,
    className = _ref.className,
    props = _objectWithoutProperties(_ref, [
      'onClick',
      'children',
      'className',
    ]);

  var _useStyles = useStyles$1(),
    fixed = _useStyles.fixed;

  return /*#__PURE__*/ React__default['default'].createElement(
    core.Fab,
    _extends({}, props, {
      onClick: onClick,
      className: clsx(className, fixed),
    }),
    children
  );
};

// these values are used for change detection
var defaultProps$1 = {
  defaultValue: {},
  formKey: 'staticKey',
};

var InputModal = function InputModal(_ref) {
  var open = _ref.open,
    onClose = _ref.onClose,
    _ref$onCreate = _ref.onCreate,
    onCreate =
      _ref$onCreate === void 0
        ? function () {
            return null;
          }
        : _ref$onCreate,
    _ref$onChange = _ref.onChange,
    onChange =
      _ref$onChange === void 0
        ? function () {
            return null;
          }
        : _ref$onChange,
    title = _ref.title,
    fields = _ref.fields,
    _ref$defaultValue = _ref.defaultValue,
    defaultValue =
      _ref$defaultValue === void 0
        ? defaultProps$1.defaultValue
        : _ref$defaultValue,
    _ref$formKey = _ref.formKey,
    formKey = _ref$formKey === void 0 ? defaultProps$1.formKey : _ref$formKey,
    children = _ref.children,
    _ref$invalidFields = _ref.invalidFields,
    invalidFields = _ref$invalidFields === void 0 ? {} : _ref$invalidFields,
    _ref$saveLabel = _ref.saveLabel,
    saveLabel = _ref$saveLabel === void 0 ? 'Create' : _ref$saveLabel,
    _ref$renderActions = _ref.renderActions,
    renderActions = _ref$renderActions === void 0 ? null : _ref$renderActions,
    bottomContent = _ref.bottomContent;
  var actualRenderActions = React.useCallback(
    function (formId) {
      if (renderActions) return renderActions(formId);
      return /*#__PURE__*/ React__default['default'].createElement(
        React__default['default'].Fragment,
        null,
        /*#__PURE__*/ React__default['default'].createElement(
          Button__default['default'],
          {
            onClick: onClose,
          },
          'Cancel'
        ),
        /*#__PURE__*/ React__default['default'].createElement(
          FlexExpander,
          null
        ),
        /*#__PURE__*/ React__default['default'].createElement(
          Button__default['default'],
          {
            color: 'primary',
            type: 'submit',
            form: formId,
          },
          saveLabel
        )
      );
    },
    [onClose, saveLabel, renderActions]
  );
  return /*#__PURE__*/ React__default['default'].createElement(
    Dialog__default['default'],
    {
      'aria-labelledby': 'input-dialog-title',
      TransitionComponent: SlideUp,
      open: open,
      onClose: onClose,
      fullWidth: true,
      maxWidth: 'sm',
    },
    /*#__PURE__*/ React__default['default'].createElement(
      DialogTitle__default['default'],
      {
        id: 'input-dialog-title',
      },
      title
    ),
    /*#__PURE__*/ React__default['default'].createElement(
      DVKForm,
      {
        key: formKey,
        fields: fields,
        defaultValue: defaultValue,
        ContentWrapper: DialogContent__default['default'],
        ActionsWrapper: DialogActions__default['default'],
        renderActions: actualRenderActions,
        onSubmit: onCreate,
        onChange: onChange,
        invalidFields: invalidFields,
        bottomContent: bottomContent,
        InputModal: InputModal,
      },
      children
    )
  );
};

var ErrorModal = function ErrorModal(_ref) {
  var _ref$message = _ref.message,
    message =
      _ref$message === void 0
        ? 'There was an error. Please check your input and try again.'
        : _ref$message,
    error = _ref.error;

  var _useState = React.useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];

  function renderActions() {
    return /*#__PURE__*/ React__default['default'].createElement(
      React__default['default'].Fragment,
      null,
      /*#__PURE__*/ React__default['default'].createElement(
        Button__default['default'],
        {
          onClick: function onClick() {
            return setOpen(false);
          },
        },
        'Ok'
      )
    );
  }

  return (
    (error &&
      /*#__PURE__*/ React__default['default'].createElement(
        Dialog__default['default'],
        {
          'aria-labelledby': 'error-dialog-title',
          TransitionComponent: SlideUp,
          open: open,
          onClose: function onClose() {
            return setOpen(false);
          },
          fullWidth: true,
          maxWidth: 'sm',
          'aria-describedby': 'error-dialog-description',
        },
        /*#__PURE__*/ React__default['default'].createElement(
          DialogTitle__default['default'],
          {
            id: 'error-dialog-title',
          },
          'Error'
        ),
        /*#__PURE__*/ React__default['default'].createElement(
          DialogContent__default['default'],
          null,
          typeof message === 'string'
            ? /*#__PURE__*/ React__default['default'].createElement(
                DialogContentText__default['default'],
                {
                  id: 'error-dialog-description',
                },
                message
              )
            : message
        ),
        /*#__PURE__*/ React__default['default'].createElement(
          DialogActions__default['default'],
          null,
          renderActions()
        )
      )) ||
    null
  );
};

var SuccessSnackbar = /*#__PURE__*/ (function (_Component) {
  _inherits(SuccessSnackbar, _Component);

  var _super = _createSuper(SuccessSnackbar);

  function SuccessSnackbar() {
    var _this;

    _classCallCheck(this, SuccessSnackbar);

    for (
      var _len = arguments.length, args = new Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), 'state', {
      open: true,
    });

    _defineProperty(_assertThisInitialized(_this), 'handleClose', function () {
      _this.setState({
        open: false,
      });
    });

    return _this;
  }

  _createClass(SuccessSnackbar, [
    {
      key: 'render',
      value: function render() {
        var open = this.state.open;
        var _this$props = this.props,
          message = _this$props.message,
          action = _this$props.action;
        return /*#__PURE__*/ React__default['default'].createElement(
          Snackbar__default['default'],
          {
            open: open,
            onClose: this.handleClose,
            message: message,
            action: action,
          }
        );
      },
    },
  ]);

  return SuccessSnackbar;
})(React.Component);

exports.ConfirmationModal = ConfirmationModal;
exports.DVKForm = DVKForm;
exports.DVKTable = DVKTable$1;
exports.ErrorModal = ErrorModal;
exports.FlexExpander = FlexExpander;
exports.FloatingButton = FloatingButton;
exports.InfoModal = InfoModal;
exports.InputModal = InputModal;
exports.SlideUp = SlideUp;
exports.SuccessSnackbar = SuccessSnackbar;
exports.createDefaultActions = createDefaultActions;
exports.d = d;
exports.debounce = debounce;
exports.deepGet = deepGet;
exports.deepSet = deepSet;
exports.isHiddenField = isHiddenField;
exports.lett = lett;
exports.useIncrementalKey = useIncrementalKey;
exports.useModal = useModal;
exports.useModals = useModals;
exports.uuid = uuid;
//# sourceMappingURL=index.js.map
